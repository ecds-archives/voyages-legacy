package edu.emory.library.tast.ui.search.query;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

import javax.faces.component.UIComponentBase;
import javax.faces.component.UIForm;
import javax.faces.context.FacesContext;
import javax.faces.context.ResponseWriter;
import javax.faces.el.MethodBinding;
import javax.faces.el.ValueBinding;
import javax.faces.event.AbortProcessingException;
import javax.faces.event.FacesEvent;

import edu.emory.library.tast.ui.search.query.searchables.ListItemsSource;
import edu.emory.library.tast.ui.search.query.searchables.SearchableAttribute;
import edu.emory.library.tast.ui.search.query.searchables.Searchables;
import edu.emory.library.tast.util.JsfUtils;
import edu.emory.library.tast.util.StringUtils;

/**
 * <p>
 * This is the JSF component responsible for bulding search query. It is bind
 * with the bean {@link edu.emory.library.tast.ui.search.query.SearchBean} via the currently
 * built quuery, represented by {@link edu.emory.library.tast.ui.search.query.Query}. When
 * rendering, it gets the current query from the bean and renders appropriately
 * each search condition. When processing postback, it completely recreates the
 * query from incomming parameters and in the update application phase it passes
 * it to the bean.
 * </p>
 * <p>
 * The component uses a hidden field named by
 * {@link #getAttributesListHiddenFieldName(FacesContext)} for keeping the list
 * of IDs of current attributes separated by commas. This hidden field is
 * updates by JavaScript whenever user removes a condition from the query or
 * rearranges the conditions. When processing postback in
 * {@link #decode(FacesContext)}, this hidden field is used to recreate the
 * query.
 * </p>
 * <p>
 * The JavaScript managing removing and rearranging conditons detect whether
 * script.aculo.us library is present and if so, add some special effects.
 * </p>
 * <p>
 * Otherwise, most of the work done by this component is related to generating
 * HTML for query conditions. Each type of query condition is encoded and
 * decoded by its own pair of functions. The name of the HTML controls which are
 * used by both encode and decode are generated by fuctions in order to make
 * them more visible in the code.
 * </p>
 * 
 * @author Jan Zich
 * 
 */
public class QueryBuilderComponent extends UIComponentBase
{

	private static final int UPDATE_DELAY = 1000;
	private static final String ID_SEPARATOR = ":";

	private Query submittedQuery;
	private Query setQuery;
	private boolean querySet = false;
	private MethodBinding onUpdateTotal;

	public String getFamily()
	{
		return null;
	}
	
	public Object saveState(FacesContext context)
	{
		Object values[] = new Object[2];
		values[0] = super.saveState(context);
		values[1] = saveAttachedState(context, onUpdateTotal);
		return values;
	}
	
	public void restoreState(FacesContext context, Object state)
	{
		Object[] values = (Object[]) state;
		super.restoreState(context, values[0]);
		onUpdateTotal = (MethodBinding) restoreAttachedState(context, values[1]);
	}

	private String getAttributesListHiddenFieldName(FacesContext context)
	{
		return getClientId(context) + "_attributes";
	}
	
	private String getHtmlNameForTotal(FacesContext context)
	{
		return getClientId(context) + "_update_total";
	}

//	private String getHtmlNameForTotalTimer(FacesContext context)
//	{
//		return getClientId(context) + "_update_total_timer";
//	}

	public void decode(FacesContext context)
	{
		
		Map params = context.getExternalContext().getRequestParameterMap();
		
		String attrFieldName = getAttributesListHiddenFieldName(context); 
		if (!params.containsKey(attrFieldName))
		{
			submittedQuery = null;
			return;
		}
		
		if (JsfUtils.getParamBoolean(params, getHtmlNameForTotal(context)))
			queueEvent(new QueryUpdateTotalEvent(this));
		
		String submittedAttributesStr = (String) params.get(attrFieldName);
		submittedQuery = new Query();

		if (!StringUtils.isNullOrEmpty(submittedAttributesStr))
		{
			
			String[] submittedAttributes = submittedAttributesStr.split(",");
			for (int i = 0; i < submittedAttributes.length; i++)
			{
				
				SearchableAttribute attribute = Searchables.getCurrent().getSearchableAttributeById(submittedAttributes[i]);
				QueryCondition queryCondition = attribute.createQueryCondition();

				boolean ok = false;
				if (queryCondition instanceof QueryConditionText)
				{
					ok = decodeSimpleCondition((QueryConditionText) queryCondition, context); 
				}
				else if (queryCondition instanceof QueryConditionNumeric)
				{
					ok = decodeNumericCondition((QueryConditionNumeric) queryCondition, context);
				}
				else if (queryCondition instanceof QueryConditionDate)
				{
					ok = decodeDateCondition((QueryConditionDate) queryCondition, context);					
				}
				else if (queryCondition instanceof QueryConditionDate)
				{
					ok = decodeDictionaryCondition((QueryConditionList) queryCondition, context);
				}
				
				if (ok) submittedQuery.addCondition(queryCondition);
				
			}
			
		}
		
	}
	
	public void processUpdates(FacesContext context)
	{
		ValueBinding vb = getValueBinding("query");
		if (vb != null && submittedQuery != null) vb.setValue(context, submittedQuery);
	}
	
	public void broadcast(FacesEvent event) throws AbortProcessingException
	{
		super.broadcast(event);

		if (event instanceof QueryUpdateTotalEvent)
			if (onUpdateTotal != null)
				onUpdateTotal.invoke(getFacesContext(), new Object[] {event});

	}
	
	public void encodeBegin(FacesContext context) throws IOException
	{
		
		ResponseWriter writer = context.getResponseWriter();
		UIForm form = JsfUtils.getForm(this, context);
		
		Query query = getQuery();
		
		// start of the registration JS
		StringBuffer regJS = new StringBuffer();
		regJS.append("QueryBuilderGlobals.registerBuilder(new QueryBuilder(");
		regJS.append("'").append(getClientId(context)).append("', ");
		regJS.append("'").append(form.getClientId(context)).append("', ");
		regJS.append("'").append(getAttributesListHiddenFieldName(context)).append("', ");
		regJS.append("'").append(getHtmlNameForTotal(context)).append("', ");
		regJS.append("{");
		
		// the list of SearchableAttributeIds for a hidden field
		StringBuffer attributeIds = new StringBuffer();
		for (Iterator iterFieldName = query.getConditions().iterator(); iterFieldName.hasNext();)
		{
			QueryCondition queryCondition = (QueryCondition) iterFieldName.next();
			if (attributeIds.length() > 0) attributeIds.append(",");
			attributeIds.append(queryCondition.getSearchableAttributeId());
		}

		// the list of SearchableAttributeIds
		JsfUtils.encodeHiddenInput(this, writer,
				getAttributesListHiddenFieldName(context),
				attributeIds.toString());

		// AJAX JS for updating totals
		String jsUpdateTotalPostponed = generateJavaScriptForUpdateTotal(form, context, false);
		String jsUpdateTotalImmediate = generateJavaScriptForUpdateTotal(form, context, false);
		
		// AJAX JS for updating totals
		JsfUtils.encodeHiddenInput(this, writer,
				getHtmlNameForTotal(context),
				"false");

		int i = 0;
		for (Iterator iterFieldName = query.getConditions().iterator(); iterFieldName.hasNext();  i++)
		{
			
			QueryCondition queryCondition = (QueryCondition) iterFieldName.next();
			String searchableAttributeId = queryCondition.getSearchableAttributeId();
			
			if (i > 0) regJS.append(", ");
			regJS.append("'").append(searchableAttributeId).append("': {");
			regJS.append("conditionDivId: '").append(getConditionDivId(context, queryCondition)).append("'");
			
			encodeStartQueryConditionBox(queryCondition, context, form, writer);
			if (queryCondition instanceof QueryConditionText)
			{
				encodeSimpleCondition(
						(QueryConditionText)queryCondition,
						context, form, writer,
						jsUpdateTotalPostponed, jsUpdateTotalImmediate, regJS);
			}
			else if (queryCondition instanceof QueryConditionNumeric)
			{
				encodeNumericCondition(
						(QueryConditionNumeric) queryCondition,
						context, form, writer,
						jsUpdateTotalPostponed, jsUpdateTotalImmediate, regJS);
			}
			else if (queryCondition instanceof QueryConditionDate)
			{
				encodeDateCondition(
						(QueryConditionDate) queryCondition,
						context, form, writer,
						jsUpdateTotalPostponed, jsUpdateTotalImmediate, regJS);
			}
			else if (queryCondition instanceof QueryConditionDate)
			{
				encodeDictionaryCondition(
						(QueryConditionList)queryCondition,
						context, form, writer,
						jsUpdateTotalPostponed, jsUpdateTotalImmediate, regJS);
			}
			encodeEndQueryConditionBox(queryCondition, context, form, writer);
			
			regJS.append("}");

		}
		
		regJS.append("}));");
		
		JsfUtils.encodeJavaScriptStart(this, writer);
		writer.write(regJS.toString());
		JsfUtils.encodeJavaScriptEnd(this, writer);

	}

	public void encodeChildren(FacesContext context) throws IOException
	{
	}

	public void encodeEnd(FacesContext context) throws IOException
	{
	}
	
	private String getConditionDivId(FacesContext context, QueryCondition cond)
	{
		return getClientId(context) + "_" + cond.getSearchableAttributeId();
	}
	
	private void encodeConditionButtonsStart(ResponseWriter writer) throws IOException
	{
		writer.startElement("table", this);
		writer.writeAttribute("align", "right", null);
		writer.writeAttribute("border", "0", null);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.startElement("tr", this);
	}

	private void encodeConditionButton(ResponseWriter writer, String imgSrc, String jsOnClick) throws IOException
	{
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-button", null);

		writer.startElement("img", this);
		writer.writeAttribute("src", imgSrc, null);
		writer.writeAttribute("onclick", jsOnClick, null);
		writer.writeAttribute("width", "12", null);
		writer.writeAttribute("height", "12", null);
		writer.writeAttribute("border", "0", null);
		writer.endElement("img");

		writer.endElement("td");
	}

	private void encodeConditionButtonSeparator(ResponseWriter writer) throws IOException
	{
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-button-separator", null);
		writer.endElement("td");
	}

	private void encodeConditionButtonsEnd(ResponseWriter writer) throws IOException
	{
		writer.endElement("tr");
		writer.endElement("table");
	}

	private void encodeConditionButtons(QueryCondition queryCondition, FacesContext context, UIForm form, ResponseWriter writer) throws IOException
	{
		
		String attributeId = queryCondition.getSearchableAttributeId();

		StringBuffer jsDelete = new StringBuffer();
		jsDelete.append("QueryBuilderGlobals.deleteCondition(");
		jsDelete.append("'").append(getClientId(context)).append("', ");
		jsDelete.append("'").append(attributeId).append("'");
		jsDelete.append(")");
//		jsDelete.append("var cond = ");
//		UtilsJSF.appendElementRefJS(jsDelete, conditionDivId).append("; ");
//		jsDelete.append("var attrListField = ");
//		UtilsJSF.appendFormElementRefJS(jsDelete, context, form, attrListFieldName).append("; ");
//		jsDelete.append("var attrs = attrListField.value.split(','); ");
//		jsDelete.append("for (var i=0; i<attrs.length; i++) {");
//		{
//			jsDelete.append("if (attrs[i] == '").append(attributeId).append("') {");
//			{
//				jsDelete.append("attrs.splice(i, 1); ");
//				jsDelete.append("attrListField.value = attrs.join(','); ");
//				jsDelete.append("if (Scriptaculous) {");
//				{
//					jsDelete.append("new Effect.Opacity(");
//					jsDelete.append("cond, ");
//					jsDelete.append("{");
//					{
//						jsDelete.append("from: 1.0, ");
//						jsDelete.append("to: 0.0, ");
//						jsDelete.append("duration: 0.5, ");
//						jsDelete.append("afterFinishInternal: function(effect) ");
//						jsDelete.append("{effect.element.parentNode.removeChild(effect.element);}");
//					}
//					jsDelete.append("}");
//					jsDelete.append(");");
//				}
//				jsDelete.append("} else {");
//				{
//					jsDelete.append("cond.parentNode.removeChild(cond);");
//				}
//				jsDelete.append("}");
//				jsDelete.append("return;");
//			}
//			jsDelete.append("}");
//		}
//		jsDelete.append("}");


		StringBuffer jsMoveUp = new StringBuffer();
		jsMoveUp.append("QueryBuilderGlobals.moveConditionUp(");
		jsMoveUp.append("'").append(getClientId(context)).append("', ");
		jsMoveUp.append("'").append(attributeId).append("'");
		jsMoveUp.append(")");
//		jsMoveUp.append("var cond = ");
//		UtilsJSF.appendElementRefJS(jsMoveUp, conditionDivId).append("; ");
//		jsMoveUp.append("var attrListField = ");
//		UtilsJSF.appendFormElementRefJS(jsMoveUp, context, form, attrListFieldName).append("; ");
//		jsMoveUp.append("var attrs = attrListField.value.split(','); ");
//		jsMoveUp.append("for (var i=0; i<attrs.length; i++) {");
//		{
//			jsMoveUp.append("if (attrs[i] == '").append(conditionId).append("') {");
//			{
//				jsMoveUp.append("if (i != 0) {");
//				{
//					jsMoveUp.append("var prevCond = cond.previousSibling; ");
//					jsMoveUp.append("var parent = cond.parentNode; ");
//					jsMoveUp.append("parent.removeChild(cond); ");
//					jsMoveUp.append("parent.insertBefore(cond, prevCond); ");
//					jsMoveUp.append("attrs[i] = attrs[i-1]; ");
//					jsMoveUp.append("attrs[i-1] = '").append(conditionId).append("'; ");
//					jsMoveUp.append("attrListField.value = attrs.join(',');");
//					jsMoveUp.append("if (Scriptaculous) {");
//					{
//						jsMoveUp.append("Element.setOpacity(cond, 0); ");
//						jsMoveUp.append("Effect.Appear(cond, {duration: 0.5});");
//					}
//					jsMoveUp.append("} ");
//				}
//				jsMoveUp.append("} ");
//				jsMoveUp.append("return;");
//			}
//			jsMoveUp.append("}");
//		}
//		jsMoveUp.append("}");
		
		StringBuffer jsMoveDown = new StringBuffer();
		jsMoveDown.append("QueryBuilderGlobals.moveConditionDown(");
		jsMoveDown.append("'").append(getClientId(context)).append("', ");
		jsMoveDown.append("'").append(attributeId).append("'");
		jsMoveDown.append(")");
//		jsMoveDown.append("var cond = ");
//		UtilsJSF.appendElementRefJS(jsMoveDown, conditionDivId).append("; ");
//		jsMoveDown.append("var attrListField = ");
//		UtilsJSF.appendFormElementRefJS(jsMoveDown, context, form, attrListFieldName).append("; ");
//		jsMoveDown.append("var attrs = attrListField.value.split(','); ");
//		jsMoveDown.append("for (var i=0; i<attrs.length; i++) {");
//		{
//			jsMoveDown.append("if (attrs[i] == '").append(attributeId).append("') {");
//			{
//				jsMoveDown.append("if (i != attrs.length-1) {");
//				{
//					jsMoveDown.append("var nextNextCond = cond.nextSibling.nextSibling; ");
//					jsMoveDown.append("var parent = cond.parentNode; ");
//					jsMoveDown.append("parent.removeChild(cond); ");
//					jsMoveDown.append("parent.insertBefore(cond, nextNextCond); ");
//					jsMoveDown.append("attrs[i] = attrs[i+1]; ");
//					jsMoveDown.append("attrs[i+1] = '").append(attributeId).append("'; ");
//					jsMoveDown.append("attrListField.value = attrs.join(',');");
//					jsMoveDown.append("if (Scriptaculous) {");
//					{
//						jsMoveDown.append("Element.setOpacity(cond, 0); ");
//						jsMoveDown.append("Effect.Appear(cond, {duration: 0.5});");
//					}
//					jsMoveDown.append("}");
//				}
//				jsMoveDown.append("} ");
//				jsMoveDown.append("return;");
//			}
//			jsMoveDown.append("}");
//		}
//		jsMoveDown.append("}");

		encodeConditionButtonsStart(writer);
		encodeConditionButton(writer, "icon-move-up.png", jsMoveUp.toString());
		encodeConditionButtonSeparator(writer);
		encodeConditionButton(writer, "icon-move-down.png", jsMoveDown.toString());
		encodeConditionButtonSeparator(writer);
		encodeConditionButton(writer, "icon-remove.png", jsDelete.toString());
		encodeConditionButtonsEnd(writer);
		
	}
	
	private void encodeStartQueryConditionBox(QueryCondition queryCondition, FacesContext context, UIForm form, ResponseWriter writer) throws IOException
	{
		
		writer.startElement("div", this);
		writer.writeAttribute("class", "side-box", null);
		writer.writeAttribute("id", getConditionDivId(context, queryCondition), null);
		
		writer.startElement("table", this);
		writer.writeAttribute("border", "0", null);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("class", "query-builder-label", null);
		writer.startElement("tr", this);
		
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-label", null);
		if (queryCondition.isErrorFlag())
		{
			writer.startElement("span", this);
			writer.writeAttribute("class", "query-builder-error", null);
			writer.write("&nbsp;!&nbsp;");
			writer.endElement("span");
			writer.write(" ");
		}
		writer.write(queryCondition.getSearchableAttribute().getUserLabel());
		writer.endElement("td");
		
		writer.startElement("td", this);
		encodeConditionButtons(queryCondition, context, form, writer);
		writer.endElement("td");
		
		writer.endElement("tr");
		writer.endElement("table");

	}
	
	private void encodeEndQueryConditionBox(QueryCondition queryCondition, FacesContext context, UIForm form, ResponseWriter writer) throws IOException
	{
		writer.endElement("div");
	}
	
	private String generateJavaScriptForUpdateTotal(UIForm form, FacesContext context, boolean immediate)
	{
		
		StringBuffer js = new StringBuffer();
		js.append("QueryBuilderGlobals.updateTotal(");
		js.append("'").append(getClientId(context)).append("', ");
		if (immediate)
			js.append("0");
		else
			js.append(UPDATE_DELAY);
		js.append(")");
		
		return js.toString();
		
	}
	
	private String getHtmlNameForSimpleValue(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId();
	}

	private void encodeSimpleCondition(QueryConditionText queryCondition, FacesContext context, UIForm form, ResponseWriter writer, String jsUpdateTotalPostponed, String jsUpdateTotalImmediate, StringBuffer regJS) throws IOException
	{
		
		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.startElement("tr", this);
		
		writer.startElement("td", this);
		writer.startElement("input", this);
		writer.writeAttribute("type", "text", null);
		writer.writeAttribute("class", "query-builder-text", null);
		writer.writeAttribute("onkeyup", jsUpdateTotalPostponed, null);
		writer.writeAttribute("name", getHtmlNameForSimpleValue(attribute, context), null);
		writer.writeAttribute("value", queryCondition.getValue(), null);
		writer.writeAttribute("autocomplete", "off", null);
		writer.endElement("input");
		writer.endElement("td");
		
		writer.endElement("tr");
		writer.endElement("table");

	}
	
	private boolean decodeSimpleCondition(QueryConditionText queryCondition, FacesContext context)
	{
		
		String fieldName = getHtmlNameForSimpleValue(queryCondition.getSearchableAttribute(), context); 
		
		Map params = context.getExternalContext().getRequestParameterMap();
		if (!params.containsKey(fieldName))
			return false;
		
		String value = (String) params.get(fieldName);
		queryCondition.setValue(value);
		
		return true;
		
	}
	
	private String getHtmlNameForNumericType(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_type";
	}

	private String getHtmlNameForNumericFrom(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_from";
	}

	private String getHtmlNameForNumericTo(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_to";
	}

	private String getHtmlNameForNumericLe(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_le";
	}

	private String getHtmlNameForNumericGe(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_ge";
	}
	
	private String getHtmlNameForNumericEq(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_eq";
	}

	private void encodeRangeSelect(ResponseWriter writer, String htmlNameForRangeType, String jsOnChange, int type) throws IOException
	{
		
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-range-type", null);
		writer.startElement("select", this);
		writer.writeAttribute("name", htmlNameForRangeType, null);
		writer.writeAttribute("onchange", jsOnChange.toString(), null);
		
		writer.startElement("option", this);
		writer.writeAttribute("value", "between", null);
		if (type == QueryConditionNumeric.TYPE_BETWEEN) writer.writeAttribute("selected", "selected", null);
		writer.write("Between");
		writer.endElement("option");
		
		writer.startElement("option", this);
		writer.writeAttribute("value", "le", null);
		if (type == QueryConditionNumeric.TYPE_LE) writer.writeAttribute("selected", "selected", null);
		writer.write("at most");
		writer.endElement("option");

		writer.startElement("option", this);
		writer.writeAttribute("value", "ge", null);
		if (type == QueryConditionNumeric.TYPE_GE) writer.writeAttribute("selected", "selected", null);
		writer.write("at least");
		writer.endElement("option");
		
		writer.startElement("option", this);
		writer.writeAttribute("value", "eq", null);
		if (type == QueryConditionNumeric.TYPE_EQ) writer.writeAttribute("selected", "selected", null);
		writer.write("is equal");
		writer.endElement("option");
		
		writer.endElement("select");
		writer.endElement("td");

	}
	
	private void encodeRangeDash(ResponseWriter writer, String tdDashId, boolean visible) throws IOException
	{
		
		writer.startElement("td", this);
		if (!visible) writer.writeAttribute("style", "display: none;", null);
		writer.writeAttribute("id", tdDashId, null);
		writer.writeAttribute("class", "query-builder-range-dash", null);
		writer.write("-");
		writer.endElement("td");
		
	}
	
	private void encodeNumericField(ResponseWriter writer, String value, String tdId, String inputName, boolean visible, String jsUpdateTotal) throws IOException
	{
		
		writer.startElement("td", this);
		if (!visible) writer.writeAttribute("style", "display: none;", null);
		writer.writeAttribute("id", tdId, null);
		writer.writeAttribute("class", "query-builder-range-value", null);
		writer.startElement("input", this);
		writer.writeAttribute("type", "text", null);
		writer.writeAttribute("name", inputName, null);
		writer.writeAttribute("value", value, null);
		writer.writeAttribute("autocomplete", "off", null);
		writer.writeAttribute("onkeyup", jsUpdateTotal, null);
		writer.endElement("input");
		writer.endElement("td");
		
	}

	private void encodeNumericCondition(QueryConditionNumeric queryCondition, FacesContext context, UIForm form, ResponseWriter writer, String jsUpdateTotalPostponed, String jsUpdateTotalImmediate, StringBuffer regJS) throws IOException
	{

		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		String tdFromId = getClientId(context) + "_" + attribute.getId() + "_td_from";
		String tdDashId = getClientId(context) + "_" + attribute.getId() + "_td_dash";
		String tdToId = getClientId(context) + "_" + attribute.getId() + "_td_to";
		String tdLeId = getClientId(context) + "_" + attribute.getId() + "_td_le";
		String tdGeId = getClientId(context) + "_" + attribute.getId() + "_td_ge";
		String tdEqId = getClientId(context) + "_" + attribute.getId() + "_td_eq";
		
		String htmlNameForRangeType = getHtmlNameForNumericType(attribute, context);
		String inputFromName = getHtmlNameForNumericFrom(attribute, context);
		String inputToName = getHtmlNameForNumericTo(attribute, context);
		String inputLeName = getHtmlNameForNumericLe(attribute, context);
		String inputGeName = getHtmlNameForNumericGe(attribute, context);
		String inputEqName = getHtmlNameForNumericEq(attribute, context);
		
		regJS.append(", ");
		regJS.append("typeFieldName: '").append(htmlNameForRangeType).append("'");
		regJS.append(", ");
		regJS.append("fromId: '").append(tdFromId).append("'");
		regJS.append(", ");
		regJS.append("dashId: '").append(tdDashId).append("'");
		regJS.append(", ");
		regJS.append("toId: '").append(tdToId).append("'");
		regJS.append(", ");
		regJS.append("leId: '").append(tdLeId).append("'");
		regJS.append(", ");
		regJS.append("geId: '").append(tdGeId).append("'");
		regJS.append(", ");
		regJS.append("eqId: '").append(tdEqId).append("'");
		
		String jsOnTypeChange = 
			"QueryBuilderGlobals.changeNumericRangeType(" + 
			"'" + getClientId(context) + "', " + 
			"'" + attribute.getId() + "')";

		int type = queryCondition.getType();

		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.startElement("tr", this);
		
		encodeRangeSelect(writer,
				htmlNameForRangeType, jsOnTypeChange,
				type);

		encodeNumericField(writer,
				queryCondition.getFrom(),
				tdFromId, inputFromName,
				type == 0,
				jsUpdateTotalPostponed);
		
		encodeRangeDash(writer,
				tdDashId,
				type == 0);

		encodeNumericField(writer,
				queryCondition.getTo(),
				tdToId, inputToName,
				type == 0,
				jsUpdateTotalPostponed);

		encodeNumericField(writer,
				queryCondition.getLe(),
				tdLeId, inputLeName,
				type == 1,
				jsUpdateTotalPostponed);

		encodeNumericField(writer,
				queryCondition.getGe(),
				tdGeId, inputGeName,
				type == 2,
				jsUpdateTotalPostponed);

		encodeNumericField(writer,
				queryCondition.getEq(),
				tdEqId, inputEqName,
				type == 3,
				jsUpdateTotalPostponed);
		
		writer.endElement("tr");
		writer.endElement("table");
	
	}

	private boolean decodeNumericCondition(QueryConditionNumeric queryCondition, FacesContext context)
	{
		
		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		Map params = context.getExternalContext().getRequestParameterMap();
		if (!params.containsKey(getHtmlNameForNumericType(attribute, context)))
			return false;
		
		String typeStr = (String) params.get(getHtmlNameForNumericType(attribute, context));
		String from = (String) params.get(getHtmlNameForNumericFrom(attribute, context));
		String to = (String) params.get(getHtmlNameForNumericTo(attribute, context));
		String le = (String) params.get(getHtmlNameForNumericLe(attribute, context));
		String ge = (String) params.get(getHtmlNameForNumericGe(attribute, context));
		String eq = (String) params.get(getHtmlNameForNumericEq(attribute, context));

		int type;
		if ("between".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_BETWEEN;
		}
		else if ("le".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_LE; 
		}
		else if ("ge".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_GE;
		}
		else if ("eq".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_EQ;
		}
		else
		{
			return false;
		}
		
		queryCondition.setType(type);
		queryCondition.setFrom(from);
		queryCondition.setTo(to);
		queryCondition.setLe(le);
		queryCondition.setGe(ge);
		queryCondition.setEq(eq);

		return true;
		
	}

	private String getHtmlNameForDateType(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_type";
	}

	private String getHtmlNameForDateFromMonth(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_from_month";
	}

	private String getHtmlNameForDateFromYear(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_from_year";
	}

	private String getHtmlNameForDateToMonth(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_to_month";
	}

	private String getHtmlNameForDateToYear(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_to_year";
	}

	private String getHtmlNameForDateLeMonth(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_le_month";
	}

	private String getHtmlNameForDateLeYear(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_le_year";
	}

	private String getHtmlNameForDateGeMonth(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_ge_month";
	}
	
	private String getHtmlNameForDateGeYear(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_ge_year";
	}

	private String getHtmlNameForDateEqMonth(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_eq_month";
	}

	private String getHtmlNameForDateEqYear(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_eq_year";
	}

	private String getHtmlNameForRangeMonth(SearchableAttribute attribute, FacesContext context, int month)
	{
		return getClientId(context) + "_" + attribute.getId() + "_month_" + month;
	}
	
	private String getTdNameForMonth(FacesContext context, SearchableAttribute attribute, int month)
	{
		return getClientId(context) + "_" + attribute.getId() + "_td_month_" + month;
	}
	
	private void encodeDateField(FacesContext context, UIForm form, ResponseWriter writer, String month, String year, String tdMonthId, String tdSlashId, String tdYearId, String inputMonthName, String inputYearName, boolean visible, String jsUpdateTotal) throws IOException
	{
		
		String jsMonthOnFocus =
			"if (this.value == '" + QueryConditionDate.EMPTY_MONTH + "') " +
			"this.value = '';";

		String jsYearOnFocus =
			"if (this.value == '" + QueryConditionDate.EMPTY_YEAR + "') " +
			"this.value = '';";

		writer.startElement("td", this);
		if (!visible) writer.writeAttribute("style", "display: none;", null);
		writer.writeAttribute("id", tdMonthId, null);
		writer.writeAttribute("class", "query-builder-range-month", null);
		writer.startElement("input", this);
		writer.writeAttribute("type", "text", null);
		writer.writeAttribute("name", inputMonthName, null);
		writer.writeAttribute("onfocus", jsMonthOnFocus, null);
		writer.writeAttribute("value", month, null);
		writer.writeAttribute("autocomplete", "off", null);
		writer.writeAttribute("onkeyup", jsUpdateTotal, null);
		writer.endElement("input");
		writer.endElement("td");
		
		writer.startElement("td", this);
		if (!visible) writer.writeAttribute("style", "display: none;", null);
		writer.writeAttribute("id", tdSlashId, null);
		writer.writeAttribute("class", "query-builder-range-slash", null);
		writer.write("/");
		writer.endElement("td");

		writer.startElement("td", this);
		if (!visible) writer.writeAttribute("style", "display: none;", null);
		writer.writeAttribute("id", tdYearId, null);
		writer.writeAttribute("class", "query-builder-range-year", null);
		writer.startElement("input", this);
		writer.writeAttribute("type", "text", null);
		writer.writeAttribute("name", inputYearName, null);
		writer.writeAttribute("onfocus", jsYearOnFocus, null);
		writer.writeAttribute("value", year, null);
		writer.writeAttribute("autocomplete", "off", null);
		writer.writeAttribute("onkeyup", jsUpdateTotal, null);
		writer.endElement("input");
		writer.endElement("td");

	}
	
	private void encodeDateCondition(QueryConditionDate queryCondition, FacesContext context, UIForm form, ResponseWriter writer, String jsUpdateTotalPostponed, String jsUpdateTotalImmediate, StringBuffer regJS) throws IOException
	{

		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		String tdFromMonthId = getClientId(context) + "_" + attribute.getId() + "_td_from_month";
		String tdSlashBetweenStartId = getClientId(context) + "_" + attribute.getId() + "_td_slash_between_start";
		String tdFromYearId = getClientId(context) + "_" + attribute.getId() + "_td_from_year";
		String tdDashId = getClientId(context) + "_" + attribute.getId() + "_td_dash";
		String tdToMonthId = getClientId(context) + "_" + attribute.getId() + "_td_to_month";
		String tdSlashBetweenEndId = getClientId(context) + "_" + attribute.getId() + "_td_slash_between_end";
		String tdToYearId = getClientId(context) + "_" + attribute.getId() + "_td_to_year";
		String tdLeMonthId = getClientId(context) + "_" + attribute.getId() + "_td_le_month";
		String tdSlashLeId = getClientId(context) + "_" + attribute.getId() + "_td_le_slash";
		String tdLeYearId = getClientId(context) + "_" + attribute.getId() + "_td_le_year";
		String tdGeMonthId = getClientId(context) + "_" + attribute.getId() + "_td_ge_month";
		String tdSlashGeId = getClientId(context) + "_" + attribute.getId() + "_td_ge_slash";
		String tdGeYearId = getClientId(context) + "_" + attribute.getId() + "_td_ge_year";
		String tdEqMonthId = getClientId(context) + "_" + attribute.getId() + "_td_eq_month";
		String tdSlashEqId = getClientId(context) + "_" + attribute.getId() + "_td_eq_slash";
		String tdEqYearId = getClientId(context) + "_" + attribute.getId() + "_td_eq_year";
		
		String htmlNameForRangeType = getHtmlNameForDateType(attribute, context);
		String inputFromMonthName = getHtmlNameForDateFromMonth(attribute, context);
		String inputFromYearName = getHtmlNameForDateFromYear(attribute, context);
		String inputToMonthName = getHtmlNameForDateToMonth(attribute, context);
		String inputToYearName = getHtmlNameForDateToYear(attribute, context);
		String inputLeMonthName = getHtmlNameForDateLeMonth(attribute, context);
		String inputLeYearName = getHtmlNameForDateLeYear(attribute, context);
		String inputGeMonthName = getHtmlNameForDateGeMonth(attribute, context);
		String inputGeYearName = getHtmlNameForDateGeYear(attribute, context);
		String inputEqMonthName = getHtmlNameForDateEqMonth(attribute, context);
		String inputEqYearName = getHtmlNameForDateEqYear(attribute, context);
		
		regJS.append(", ");
		regJS.append("typeFieldName: '").append(htmlNameForRangeType).append("'");
		regJS.append(", ");
		regJS.append("tdFromMonthId: '").append(tdFromMonthId).append("'");
		regJS.append(", ");
		regJS.append("tdSlashBetweenStartId: '").append(tdSlashBetweenStartId).append("'");
		regJS.append(", ");
		regJS.append("tdFromYearId: '").append(tdFromYearId).append("'");
		regJS.append(", ");
		regJS.append("tdDashId: '").append(tdDashId).append("'");
		regJS.append(", ");
		regJS.append("tdToMonthId: '").append(tdToMonthId).append("'");
		regJS.append(", ");
		regJS.append("tdSlashBetweenEndId: '").append(tdSlashBetweenEndId).append("'");
		regJS.append(", ");
		regJS.append("tdToYearId: '").append(tdToYearId).append("'");
		regJS.append(", ");
		regJS.append("tdLeMonthId: '").append(tdLeMonthId).append("'");
		regJS.append(", ");
		regJS.append("tdSlashLeId: '").append(tdSlashLeId).append("'");
		regJS.append(", ");
		regJS.append("tdLeYearId: '").append(tdLeYearId).append("'");
		regJS.append(", ");
		regJS.append("tdGeMonthId: '").append(tdGeMonthId).append("'");
		regJS.append(", ");
		regJS.append("tdSlashGeId: '").append(tdSlashGeId).append("'");
		regJS.append(", ");
		regJS.append("tdGeYearId: '").append(tdGeYearId).append("'");
		regJS.append(", ");
		regJS.append("tdEqMonthId: '").append(tdEqMonthId).append("'");
		regJS.append(", ");
		regJS.append("tdSlashEqId: '").append(tdSlashEqId).append("'");
		regJS.append(", ");
		regJS.append("tdEqYearId: '").append(tdEqYearId).append("'");
		regJS.append(", ");
		regJS.append("monthsTds: [");
		for (int i = 0; i < 12; i++)
		{
			if (i > 0) regJS.append(", ");
			regJS.append("'").append(getTdNameForMonth(context, attribute, i)).append("'");
		}
		regJS.append("]");
		
		String jsOnTypeChange = 
			"QueryBuilderGlobals.changeDateRangeType(" + 
			"'" + getClientId(context) + "', " + 
			"'" + attribute.getId() + "')";
		
		int type = queryCondition.getType();

		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.startElement("tr", this);
		
		encodeRangeSelect(writer,
				htmlNameForRangeType, jsOnTypeChange,
				type);

		encodeDateField(context, form, writer, 
				queryCondition.getFromMonth(), queryCondition.getFromYear(),
				tdFromMonthId, tdSlashBetweenStartId, tdFromYearId,
				inputFromMonthName, inputFromYearName,
				type == 0,
				jsUpdateTotalPostponed);
		
		encodeRangeDash(writer,
				tdDashId,
				type == 0);

		encodeDateField(context, form, writer,
				queryCondition.getToMonth(), queryCondition.getToYear(),
				tdToMonthId, tdSlashBetweenEndId, tdToYearId,
				inputToMonthName, inputToYearName,
				type == 0,
				jsUpdateTotalPostponed);

		encodeDateField(context, form, writer,
				queryCondition.getLeMonth(), queryCondition.getLeYear(),
				tdLeMonthId, tdSlashLeId, tdLeYearId,
				inputLeMonthName, inputLeYearName,
				type == 1,
				jsUpdateTotalPostponed);

		encodeDateField(context, form, writer,
				queryCondition.getGeMonth(), queryCondition.getGeYear(),
				tdGeMonthId, tdSlashGeId, tdGeYearId,
				inputGeMonthName, inputGeYearName,
				type == 2,
				jsUpdateTotalPostponed);

		encodeDateField(context, form, writer,
				queryCondition.getEqMonth(), queryCondition.getEqYear(),
				tdEqMonthId, tdSlashEqId, tdEqYearId,
				inputEqMonthName, inputEqYearName,
				type == 3,
				jsUpdateTotalPostponed);

		writer.endElement("tr");
		writer.endElement("table");
			
		for (int i = 0; i < 12; i++)
			JsfUtils.encodeHiddenInput(this, writer,
					getHtmlNameForRangeMonth(attribute, context, i),
					queryCondition.isMonthSelected(i) ? "true" : "false");

		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.writeAttribute("class", "query-builder-range-months", null);
		writer.startElement("tr", this);
		
		StringBuffer jsSelectMonth = new StringBuffer();
		
		for (int i = 0; i < 12; i++)
		{
			
			jsSelectMonth.setLength(0);
			jsSelectMonth.append("QueryBuilderGlobals.toggleMonth(");
			jsSelectMonth.append("'").append(getClientId(context)).append("', ");
			jsSelectMonth.append(i);
			jsSelectMonth.append(")");
			
			String styleClass = queryCondition.isMonthSelected(i) ? 
					"query-builder-range-month-selected" : 
					"query-builder-range-month-delected"; 
			
			writer.startElement("td", this);
			writer.writeAttribute("id", getTdNameForMonth(context, attribute, i), null);
			writer.writeAttribute("class", styleClass, null);
			writer.writeAttribute("onclick", jsSelectMonth.toString(), null);
			writer.write(QueryConditionDate.MONTH_NAMES[i]);
			writer.endElement("td");

		}
		
		writer.endElement("tr");
		writer.endElement("table");

	}

	private boolean decodeDateCondition(QueryConditionDate queryCondition, FacesContext context)
	{
		
		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		Map params = context.getExternalContext().getRequestParameterMap();
		if (!params.containsKey(getHtmlNameForDateType(attribute, context)))
			return false;
		
		String typeStr = (String) params.get(getHtmlNameForDateType(attribute, context));
		String fromMonth = (String) params.get(getHtmlNameForDateFromMonth(attribute, context));
		String fromYear = (String) params.get(getHtmlNameForDateFromYear(attribute, context));
		String toMonth = (String) params.get(getHtmlNameForDateToMonth(attribute, context));
		String toYear = (String) params.get(getHtmlNameForDateToYear(attribute, context));
		String leMonth = (String) params.get(getHtmlNameForDateLeMonth(attribute, context));
		String leYear = (String) params.get(getHtmlNameForDateLeYear(attribute, context));
		String geMonth = (String) params.get(getHtmlNameForDateGeMonth(attribute, context));
		String geYear = (String) params.get(getHtmlNameForDateGeYear(attribute, context));
		String eqMonth = (String) params.get(getHtmlNameForDateEqMonth(attribute, context));
		String eqYear = (String) params.get(getHtmlNameForDateEqYear(attribute, context));

		int type;
		if ("between".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_BETWEEN;
		}
		else if ("le".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_LE; 
		}
		else if ("ge".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_GE;
		}
		else if ("eq".equals(typeStr))
		{
			type = QueryConditionNumeric.TYPE_EQ;
		}
		else
		{
			return false;
		}
		
		queryCondition.setType(type);
		queryCondition.setFromMonth(fromMonth);
		queryCondition.setFromYear(fromYear);
		queryCondition.setToMonth(toMonth);
		queryCondition.setToYear(toYear);
		queryCondition.setLeMonth(leMonth);
		queryCondition.setLeYear(leYear);
		queryCondition.setGeMonth(geMonth);
		queryCondition.setGeYear(geYear);
		queryCondition.setEqMonth(eqMonth);
		queryCondition.setEqYear(eqYear);
		
		for (int i = 0; i < 12; i++)
		{
			boolean monthSelected = JsfUtils.getParamBoolean(params, getHtmlNameForRangeMonth(attribute, context, i));
			queryCondition.setMonthStatus(i, monthSelected);
		}
		
		return true;
		
	}

	private String getHtmlNameForList(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_list";
	}

	private String getHtmlNameListItemElement(SearchableAttribute attribute, FacesContext context, String fullId)
	{
		return getClientId(context) + "_" + attribute.getId() + "_list_td_" + fullId;
	}

	private String getHtmlNameForListCheckbox(SearchableAttribute attribute, FacesContext context, String fullId)
	{
		return getClientId(context) + "_" + attribute.getId() + "_list_cb_" + fullId;
	}

	private String getHtmlNameForListState(SearchableAttribute attribute, FacesContext context)
	{
		return getClientId(context) + "_" + attribute.getId() + "_list_state";
	}
	
	private void createRegJsForListItem(SearchableAttribute attribute, FacesContext context, QueryConditionListItem item, String parentId, StringBuffer regJS)
	{
		
		String fullId;
		if (!StringUtils.isNullOrEmpty(parentId))
			fullId = "";
		else
			fullId = parentId + ID_SEPARATOR + item.getId();

		regJS.append("'").append(item.getId()).append("': ");
		regJS.append("{");
		regJS.append("fullId: '").append(fullId).append("', ");
		regJS.append("text: '").append(JsfUtils.escapeStringForJS(item.getText())).append("', ");
		regJS.append("checkboxId: '").append(getHtmlNameForListCheckbox(attribute, context, fullId)).append("', ");
		regJS.append("elementId: '").append(getHtmlNameListItemElement(attribute, context, fullId)).append("', ");
		
		if (item.getChildrenCount() > 0)
		{
			regJS.append("children: {");
			QueryConditionListItem[] children = item.getChildren();
			for (int i = 0; i < children.length; i++)
			{
				if (i > 0 ) regJS.append(", ");
				createRegJsForListItem(attribute, context, children[i], fullId, regJS);
			}
			regJS.append("}");
		}
		
		regJS.append("}");
		
	}
	
	private void appendSelectedItems(StringBuffer displayedText, QueryConditionList queryCondition, QueryConditionListItem item, String parentId)
	{
		
		String fullId;
		if (!StringUtils.isNullOrEmpty(parentId))
			fullId = "";
		else
			fullId = parentId + ID_SEPARATOR + item.getId();
		
		if (queryCondition.containsId(fullId))
		{
			if (displayedText.length() > 0) displayedText.append(", ");
			displayedText.append(item.getText());
		}
		
		if (item.getChildrenCount() > 0)
		{
			QueryConditionListItem[] children = item.getChildren();
			for (int i = 0; i < children.length; i++)
				appendSelectedItems(displayedText, queryCondition, children[i], fullId);
		}
		
	}
	
	private void encodeListItem(SearchableAttribute attribute, FacesContext context, ResponseWriter writer, String jsUpdateTotal, QueryConditionList queryCondition, QueryConditionListItem item, String parentId) throws IOException
	{
		
		String fullId;
		if (!StringUtils.isNullOrEmpty(parentId))
			fullId = "";
		else
			fullId = parentId + ID_SEPARATOR + item.getId();
		
		writer.startElement("tr", this);
		writer.writeAttribute("id", getHtmlNameListItemElement(attribute, context, fullId), null);
		
		writer.startElement("td", this);
		writer.startElement("input", this);
		writer.writeAttribute("type", "checkbox", null);
		writer.writeAttribute("id", getHtmlNameForListCheckbox(attribute, context, fullId), null);
		writer.writeAttribute("value", item.getId(), null);
		writer.writeAttribute("onclick", jsUpdateTotal, null);
		writer.writeAttribute("name", getHtmlNameForList(attribute, context), null);
		if (queryCondition.containsId(fullId)) writer.writeAttribute("checked", "checked", null);
		writer.endElement("input");
		writer.endElement("td");

		writer.startElement("td", this);
		writer.write(item.getText());
		writer.endElement("td");
	
		writer.endElement("tr");
		
		if (item.getChildrenCount() > 0)
		{
			QueryConditionListItem[] children = item.getChildren();
			
			writer.startElement("tr", this);
			
			writer.startElement("td", this);
			writer.endElement("td");

			writer.startElement("td", this);
			writer.startElement("table", this);
			writer.writeAttribute("cellspacing", "0", null);
			writer.writeAttribute("cellpadding", "0", null);
			writer.writeAttribute("border", "0", null);
			writer.startElement("tr", this);
			for (int i = 0; i < children.length; i++)
			{
				encodeListItem(attribute, context, writer, jsUpdateTotal, queryCondition, children[i], fullId);
			}
			writer.endElement("table");
			writer.endElement("td");

			writer.endElement("tr");
		}
		
		
	}

	private void encodeDictionaryCondition(QueryConditionList queryCondition, FacesContext context, UIForm form, ResponseWriter writer, String jsUpdateTotalPostponed, String jsUpdateTotalImmediate, StringBuffer regJS) throws IOException
	{
		
		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
	
		String showElementId = getClientId(context) + "_" + attribute.getId() + "_show";
		String showListElementId = getClientId(context) + "_" + attribute.getId() + "_show_list";
		String editElementId = getClientId(context) + "_" + attribute.getId() + "_edit";
		String editListElementId = getClientId(context) + "_" + attribute.getId() + "_edit_list";
		
		QueryConditionListItem[] allItems = ((ListItemsSource)attribute).getAvailableItems();

		regJS.append(", ");
		regJS.append("stateFieldName: '").append(getHtmlNameForListState(attribute, context)).append("'");
		regJS.append(", ");
		regJS.append("showElementId: '").append(showElementId).append("'");
		regJS.append(", ");
		regJS.append("showListElementId: '").append(showListElementId).append("'");
		regJS.append(", ");
		regJS.append("editElementId: '").append(editElementId).append("'");
		regJS.append(", ");
		regJS.append("editListElementId: '").append(editListElementId).append("'");
		regJS.append(", ");
		regJS.append("itemsField: '").append(getHtmlNameForList(attribute, context)).append("'");
		regJS.append(", ");
		regJS.append("items: {");
		for (int i = 0; i < allItems.length; i++)
		{
			createRegJsForListItem(attribute, context, allItems[i], "", regJS);
		}
		regJS.append("}");

		// selected items text
		StringBuffer displayList = new StringBuffer();
		for (int i = 0; i < allItems.length; i++)
			appendSelectedItems(displayList, queryCondition, allItems[i], "");
		
		if (displayList.length() == 0)
			displayList.append("[<i>nothing selected</i>]");

		// state (edit/show)
		JsfUtils.encodeHiddenInput(this, writer,
				getHtmlNameForListState(attribute, context),
				queryCondition.isEdit() ? "edit" : "show");

		// open list
		String jsOpenList = 
			"QueryBuilderGlobals.openList(" +
			"'" + getClientId(context) + "'," +
			"'" + attribute.getId() + "')";

		// close list
		String jsCloseList = 
			"QueryBuilderGlobals.closeList(" +
			"'" + getClientId(context) + "'," +
			"'" + attribute.getId() + "')";
		
		// select all
		String jsSelectAll = 
			"QueryBuilderGlobals.listSelectAll(" +
			"'" + getClientId(context) + "'," +
			"'" + attribute.getId() + "')";

		// deselect all
		String jsDeselectAll = 
			"QueryBuilderGlobals.listDeselectAll(" +
			"'" + getClientId(context) + "'," +
			"'" + attribute.getId() + "')";
		
		// quicksearch JS
		String jsQuickSearch =
			"QueryBuilderGlobals.quickSearchList(" + 
			"'" + getClientId(context) + "', " +
			"'" + attribute.getId() + "', " +
			"this)";
		
		// readonly part: start
		writer.startElement("div", this);
		writer.writeAttribute("id", showElementId, null);
		writer.writeAttribute("class", "query-builder-show", null);
		if (queryCondition.isEdit()) writer.writeAttribute("style", "display: none", null);
		
		// selected items
		writer.startElement("div", this);
		writer.writeAttribute("class", "query-builder-show-list", null);
		writer.writeAttribute("id", showListElementId, null);
		writer.write(displayList.toString());
		writer.endElement("div");
		
		// select button
		writer.startElement("div", this);
		writer.writeAttribute("class", "query-builder-list-button", null);
		writer.startElement("input", this);
		writer.writeAttribute("type", "button", null);
		writer.writeAttribute("value", "Select", null);
		writer.writeAttribute("onclick", jsOpenList, null);
		writer.endElement("input");
		writer.endElement("div");
		
		// readonly part: end
		writer.endElement("div");
		
		// edit part: start
		writer.startElement("div", this);
		writer.writeAttribute("id", editElementId, null);
		writer.writeAttribute("class", "query-builder-edit", null);
		if (!queryCondition.isEdit()) writer.writeAttribute("style", "display: none", null);

		// quicksearch table container: start
		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.writeAttribute("class", "query-builder-quicksearch", null);
		writer.startElement("tr", this);
		
		// quicksearch title
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-quicksearch-label", null);
		writer.write("Quicksearch");
		writer.endElement("td");

		// quicksearch
		writer.startElement("td", this);
		writer.writeAttribute("class", "query-builder-quicksearch-input", null);
		writer.startElement("input", this);
		writer.writeAttribute("type", "text", null);
		writer.writeAttribute("name", "", null);
		writer.writeAttribute("onkeyup", jsQuickSearch, null);
		writer.endElement("input");
		writer.endElement("td");

		// quicksearch table container: end
		writer.endElement("tr");
		writer.endElement("table");

		// list: start
		writer.startElement("div", this);
		writer.writeAttribute("class", "query-builder-edit-list", null);
		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		
		// actual list
		for (int i = 0; i < allItems.length; i++)
			encodeListItem(attribute, context, writer, jsUpdateTotalPostponed,
					queryCondition, allItems[i], "");
		
		// list: end
		writer.endElement("table");
		writer.endElement("div");

		// buttons in edit: start
		writer.startElement("table", this);
		writer.writeAttribute("cellspacing", "0", null);
		writer.writeAttribute("cellpadding", "0", null);
		writer.writeAttribute("border", "0", null);
		writer.writeAttribute("class", "query-builder-list-buttons", null);
		writer.startElement("tr", this);
		
		// ok button
		writer.startElement("td", this);
		writer.startElement("input", this);
		writer.writeAttribute("type", "button", null);
		writer.writeAttribute("value", "OK", null);
		writer.writeAttribute("onclick", jsCloseList, null);
		writer.endElement("input");
		writer.endElement("td");
		
		// select all
		writer.startElement("td", this);
		writer.startElement("input", this);
		writer.writeAttribute("type", "button", null);
		writer.writeAttribute("value", "Select all", null);
		writer.writeAttribute("onclick", jsSelectAll, null);
		writer.endElement("input");
		writer.endElement("td");
		
		// deselect all
		writer.startElement("td", this);
		writer.startElement("input", this);
		writer.writeAttribute("type", "button", null);
		writer.writeAttribute("value", "Delect all", null);
		writer.writeAttribute("onclick", jsDeselectAll, null);
		writer.endElement("input");
		writer.endElement("td");

		// buttons: end
		writer.endElement("tr");
		writer.endElement("table");
		
		// edit part: end
		writer.endElement("div");

	}

	private boolean decodeDictionaryCondition(QueryConditionList queryCondition, FacesContext context)
	{
		
		SearchableAttribute attribute = queryCondition.getSearchableAttribute();
		
		Map params = context.getExternalContext().getRequestParameterValuesMap();
		String[] values = (String[]) params.get(getHtmlNameForList(attribute, context));
		if (values == null || values.length == 0)
			return false;
		
		for (int i = 0; i < values.length; i++)
			queryCondition.addId(values[i]);
		
		queryCondition.setEdit(
				JsfUtils.getParamString(context,
						getHtmlNameForListState(attribute, context), "show").compareTo("edit") == 0);
		
		return true;

	}
	
	public Query getQuery()
	{
		if (querySet) return setQuery;
		ValueBinding vb = getValueBinding("query");
		if (vb == null) return submittedQuery;
		return (Query) vb.getValue(getFacesContext());
	}

	public void setQuery(Query query)
	{
		querySet = true;
		this.setQuery = query;
	}

	public MethodBinding getOnUpdateTotal()
	{
		return onUpdateTotal;
	}

	public void setOnUpdateTotal(MethodBinding onUpdateTotal)
	{
		this.onUpdateTotal = onUpdateTotal;
	}

}