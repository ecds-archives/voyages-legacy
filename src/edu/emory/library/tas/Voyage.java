package edu.emory.library.tas;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import edu.emory.library.tas.util.HibernateConnector;

public class Voyage extends AbstractDescriptiveObject {
	
	/**
	 * Modified flag.
	 */
	public static final int UPDATED = 1;
	
	/**
	 * Unmodified flag.
	 */
	public static final int NOT_UPDATED = 0;
	
	/**
	 * Approved flag.
	 */
	private boolean approved = false;
	
	/**
	 * Field informing whether object was modified/unmodified.
	 */
	private int modified = Voyage.NOT_UPDATED;
	
	/**
	 * Field informing whether object's slaves were modified/unmodified.
	 */
	private int slavesModified = NOT_UPDATED;
	
	/**
	 * Creation flag. If true - object should be created in DB.
	 */
	private boolean created = false;
	
	/**
	 * Set of slaves.
	 */
	private Set slaves = new HashSet();
	
	/*AUTOGENERATED BLOCK*/
	static {
		/** Static construction **/
		types.put("voyageId", "Long");
		types.put("shipname", "String");
		types.put("iid", "Long");
		types.put("revisionId", "Long");
		types.put("captainA", "String");
		types.put("captainB", "String");
		types.put("captainC", "String");
		types.put("portdep", "PortLocation");
		types.put("datedepC", "Integer");
		types.put("datedepB", "Integer");
		types.put("datedepA", "Integer");
		types.put("datepl", "Integer");
		userLabels.put("voyageId", "Voyage ID");
		userLabels.put("shipname", "Ship name");
		userLabels.put("iid", "");
		userLabels.put("revisionId", "");
		userLabels.put("captainA", "Captain A");
		userLabels.put("captainB", "Captain B");
		userLabels.put("captainC", "Captain C");
		userLabels.put("portdep", "Departure port");
		userLabels.put("datedepC", "datedepc");
		userLabels.put("datedepB", "datedepb");
		userLabels.put("datedepA", "datedepa");
		userLabels.put("datepl", "datepl");
	}
	/*END AUTOGENERATED*/
	
	
	/**
	 * Creates new Voyage. Object will have new ID.
	 */
	public Voyage() {
		this.created = true;
	}
	
	/**
	 * Creates new Voyage.
	 * @param p_created
	 */
	private Voyage(boolean p_created) {
		this.created = p_created;
	}
	
	/**
	 * Creates voyage with given ID.
	 * @param voyageId desired voyage ID.
	 * @return	Created Voyage object
	 */
	public static Voyage createNew(Long voyageId) {
		Voyage voyage = new Voyage(true);
		voyage.setVoyageId(voyageId);
		return voyage;
	}

	/**
	 * 
	 * Loads voyage
	 * @param voyage voyage providing voyage ID
	 * @param option option
	 * @return loaded voyage
	 */
	private static Voyage loadInternal(Voyage voyage, int option) {
		Voyage localVoyage = null;
		
		//Load voyage from DB
		VoyageIndex[] voyageIndex = HibernateConnector.getConnector()
			.getVoyageIndexByVoyage(voyage, option);
		
		//Prepare result
		if (voyageIndex.length != 0) {
			localVoyage = voyageIndex[0].getVoyage();
			localVoyage.setSlaves(voyageIndex[0].getSlaves());
			localVoyage.setRevisionId(voyageIndex[0].getRevisionId());
		}
		
		return localVoyage;
	}
	
	/**
	 * Loads Active (most recent active) voyage with given ID.
	 * @param voyageId	voyuage ID
	 * @return voyage object, null if there is no desired Voyage in DB
	 */
	public static Voyage loadActive(Long voyageId) {
		Voyage localVoyage = new Voyage();
		localVoyage.setVoyageId(voyageId);
		return loadInternal(localVoyage, 
				HibernateConnector.APPROVED & HibernateConnector.WITHOUT_HISTORY);
	}

	/**
	 * Loads most recent (not necessary active) voyage with given ID.
	 * @param voyageId	voyuage ID
	 * @return voyage object, null if there is no desired Voyage in DB
	 */
	public static Voyage loadMostRecent(Long voyageId) {
		Voyage localVoyage = new Voyage();
		localVoyage.setVoyageId(voyageId);
		return loadInternal(localVoyage, 
				HibernateConnector.APPROVED_AND_NOT_APPROVED & HibernateConnector.WITHOUT_HISTORY);
	}

	/**
	 * Loads voyage with given ID and given revision ID.
	 * @param voyageId	voyuage ID
	 * @return voyage object, null if there is no desired Voyage in DB
	 */
	public static Voyage loadByRevision(Long voyageId, Long revisionId) {
		Voyage localVoyage = new Voyage();
		localVoyage.setVoyageId(voyageId);
		localVoyage.setRevisionId(revisionId);
		return loadInternal(localVoyage, 
				HibernateConnector.WITHOUT_HISTORY);
	}

	/**
	 * List all revis
	 * @param voyageId
	 * @param approved
	 * @return
	 */
	public static List loadAllRevisions(Long voyageId, int p_option) {
		int option = p_option & HibernateConnector.WITH_HISTORY;
		Voyage localVoyage = new Voyage();
		localVoyage.setVoyageId(voyageId);
		
		//Load info from DB
		VoyageIndex[] voyageIndex = HibernateConnector.getConnector()
			.getVoyageIndexByVoyage(localVoyage, option);
		List list = new ArrayList();
		//Prepare result
		for (int i = 0; i < voyageIndex.length; i++) {
			Voyage v = voyageIndex[i].getVoyage();
			v.setSlaves(voyageIndex[i].getSlaves());
			v.setRevisionId(voyageIndex[i].getRevisionId());
			list.add(v);
		}
		//Return result
		return list;
	}
	
	/**
	 * Saves voyage to DB.
	 *
	 */
	public void save() {
		//Prepare VoyageIndex
		VoyageIndex vIndex = new VoyageIndex();
		vIndex.setVoyage(this);
		vIndex.setVoyageId(this.getVoyageId());
		vIndex.setSlaves(this.getSlaves());
		vIndex.setRevisionDate(new Date(System.currentTimeMillis()));
		vIndex.setFlag(approved ? new Integer(1): new Integer(0));
		
		//Save to DB (or update...)
		if (this.created) {
			HibernateConnector.getConnector().createVoyage(vIndex);
		} else {
			HibernateConnector.getConnector().updateVoyage(vIndex);
		}
	}

	/**
	 * Gets deep copy of object.
	 */
	public Object clone() {
		//Copy voyage itself
		Voyage newVoyage = new Voyage();
		newVoyage.setShipname(getShipname());
		newVoyage.setVoyageId(getVoyageId());
		newVoyage.setRevisionId(getRevisionId());
		
		//Copy slaves
		Iterator iter = getSlaves().iterator();
		HashSet set = new HashSet();
		while (iter.hasNext()) {
			set.add(((Slave)iter.next()).clone());
		}
		newVoyage.setSlaves(set);
		newVoyage.setModified(getModified());
		
		//Return copy object
		return newVoyage;
	}
	
	/**
	 * Gets set of slaves.
	 * @return Set with Slave objects
	 */
	public Set getSlaves() {
		return this.slaves;
	}
	
	/**
	 * Sets set of slaves.
	 * @param slaves Set with Slave objects
	 */
	public void setSlaves(Set slaves) {
		this.slaves = slaves;
	}
	
	/**
	 * Removes slave from list.
	 * @param slave Slave to remove
	 */
	public void removeSlave(Slave slave) {
		this.slavesModified = UPDATED;
		this.slaves.remove(slave);
	}
	
	/**
	 * Adds slave to set of slaves.
	 * @param slave Slave to add
	 */
	public void addSlave(Slave slave) {
		this.slavesModified = UPDATED;
		this.slaves.add(slave);
	}
	
	/**
	 * Gets Slave with given slaveId.
	 * @param slaveId Slave id
	 * @return Slave object, null if voyage does not have such a slave
	 */
	public Slave getSlave(Long slaveId) {
		Iterator iter = this.slaves.iterator();
		while (iter.hasNext()) {
			Slave slave = (Slave)iter.next();
			if (slave.getSlaveId().equals(slaveId)) {
				return slave;
			}
		}
		return null;
	}
	
	/**
	 * Sets modified flag.
	 * @param p_modified
	 */
	public void setModified(int p_modified) {
		this.modified = p_modified;
	}
	
	/**
	 * Gets modified flag.
	 * @return
	 */
	public int getModified() {
		return this.modified;
	}
	
	public boolean wereSlavesModified() {
		return this.slavesModified == UPDATED;
	}
	
	/**
	 * Returns string representation of object.
	 */
	public String toString() {
		return "Voyage: " + values + " Slaves: " + getSlaves();
	}
	
	
	
	/*AUTOGENERATED BLOCK*/
	/** Getters/setters **/
	public void setVoyageId(Long voyageId) {
		if ((voyageId == null && this.values.get("voyageId") != null) 
			|| (voyageId != null && !voyageId.equals(this.values.get("voyageId")))) {
			this.modified = UPDATED;
		}
		this.values.put("voyageId", voyageId);
	}
	public void setShipname(String shipname) {
		if ((shipname == null && this.values.get("shipname") != null) 
			|| (shipname != null && !shipname.equals(this.values.get("shipname")))) {
			this.modified = UPDATED;
		}
		this.values.put("shipname", shipname);
	}
	public void setIid(Long iid) {
		if ((iid == null && this.values.get("iid") != null) 
			|| (iid != null && !iid.equals(this.values.get("iid")))) {
			this.modified = UPDATED;
		}
		this.values.put("iid", iid);
	}
	public void setRevisionId(Long revisionId) {
		if ((revisionId == null && this.values.get("revisionId") != null) 
			|| (revisionId != null && !revisionId.equals(this.values.get("revisionId")))) {
			this.modified = UPDATED;
		}
		this.values.put("revisionId", revisionId);
	}
	public void setCaptainA(String captainA) {
		if ((captainA == null && this.values.get("captainA") != null) 
			|| (captainA != null && !captainA.equals(this.values.get("captainA")))) {
			this.modified = UPDATED;
		}
		this.values.put("captainA", captainA);
	}
	public void setCaptainB(String captainB) {
		if ((captainB == null && this.values.get("captainB") != null) 
			|| (captainB != null && !captainB.equals(this.values.get("captainB")))) {
			this.modified = UPDATED;
		}
		this.values.put("captainB", captainB);
	}
	public void setCaptainC(String captainC) {
		if ((captainC == null && this.values.get("captainC") != null) 
			|| (captainC != null && !captainC.equals(this.values.get("captainC")))) {
			this.modified = UPDATED;
		}
		this.values.put("captainC", captainC);
	}
	public void setPortdep(PortLocation portdep) {
		if ((portdep == null && this.values.get("portdep") != null) 
			|| (portdep != null && !portdep.equals(this.values.get("portdep")))) {
			this.modified = UPDATED;
		}
		this.values.put("portdep", portdep);
	}
	public void setDatedepC(Integer datedepC) {
		if ((datedepC == null && this.values.get("datedepC") != null) 
			|| (datedepC != null && !datedepC.equals(this.values.get("datedepC")))) {
			this.modified = UPDATED;
		}
		this.values.put("datedepC", datedepC);
	}
	public void setDatedepB(Integer datedepB) {
		if ((datedepB == null && this.values.get("datedepB") != null) 
			|| (datedepB != null && !datedepB.equals(this.values.get("datedepB")))) {
			this.modified = UPDATED;
		}
		this.values.put("datedepB", datedepB);
	}
	public void setDatedepA(Integer datedepA) {
		if ((datedepA == null && this.values.get("datedepA") != null) 
			|| (datedepA != null && !datedepA.equals(this.values.get("datedepA")))) {
			this.modified = UPDATED;
		}
		this.values.put("datedepA", datedepA);
	}
	public void setDatepl(Integer datepl) {
		if ((datepl == null && this.values.get("datepl") != null) 
			|| (datepl != null && !datepl.equals(this.values.get("datepl")))) {
			this.modified = UPDATED;
		}
		this.values.put("datepl", datepl);
	}
	public Long getVoyageId() {
		return (Long)this.values.get("voyageId");
	}
	public String getShipname() {
		return (String)this.values.get("shipname");
	}
	public Long getIid() {
		return (Long)this.values.get("iid");
	}
	public Long getRevisionId() {
		return (Long)this.values.get("revisionId");
	}
	public String getCaptainA() {
		return (String)this.values.get("captainA");
	}
	public String getCaptainB() {
		return (String)this.values.get("captainB");
	}
	public String getCaptainC() {
		return (String)this.values.get("captainC");
	}
	public PortLocation getPortdep() {
		return (PortLocation)this.values.get("portdep");
	}
	public Integer getDatedepC() {
		return (Integer)this.values.get("datedepC");
	}
	public Integer getDatedepB() {
		return (Integer)this.values.get("datedepB");
	}
	public Integer getDatedepA() {
		return (Integer)this.values.get("datedepA");
	}
	public Integer getDatepl() {
		return (Integer)this.values.get("datepl");
	}
	/*END AUTOGENERATED*/
}
